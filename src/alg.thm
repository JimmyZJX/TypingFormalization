Import "order".

Define name : ty -> prop by
	nabla x, name x.

%region Algorithmic Environment Meta-theories
Theorem env_no_ex : forall (E : ty -> olist), nabla x,
	env (E x) -> member (exvar x) (E x) -> false.
induction on 1. intros. case H1.
	case H2. case H2. apply IH to H3 _.
	case H2. apply IH to H3 _. case H2. apply IH to H3 _.

Theorem wfj_mid_exvar_det : forall F E FxE F0 E0, nabla x,
	append (F x) (exvar x :: E) (FxE x) -> append (F0 x) (exvar x :: E0) (FxE x) ->
		wfj (FxE x) -> F = F0 /\ E = E0.
induction on 3. intros. case H3.
	case H1.
	case H1. case H2. apply IH to H5 H6 H4. search.
	case H1. case H2. apply IH to H5 H6 H4. search.
	case H1. case H2. apply IH to H5 H6 H4. search.
	case H1.
		case H2. search. apply append_prune to H5.
		case H2. apply append_prune to H5. apply IH to H5 H6 H4. search.
	case H1. case H2. apply IH to H6 H7 H4. search.
	case H1. case H2. apply IH to H6 H7 H4. search.

Theorem wfj_weaken : forall FE F E, append F E FE -> wfj FE -> wfj E.
induction on 2. intros. case H2.
	case H1. search.
	case H1. search. backchain IH.
	case H1. search. backchain IH.
	case H1. search. backchain IH.
	case H1. search. backchain IH.

Theorem wfj_weaken1 : forall J E, wfj (J :: E) -> wfj E.
intros. apply wfj_weaken to _ H1 with F = J :: nil. search.
Theorem wfj_weaken2 : forall J1 J2 E, wfj (J1 :: J2 :: E) -> wfj E.
intros. apply wfj_weaken to _ H1 with F = J1 :: J2 :: nil. search.

Theorem wfj_prune_exvar : forall FxE F E, nabla x,
	wfj (FxE x) -> append (F x) (exvar x :: E x) (FxE x) ->
		exists Er, x\ Er = E.
induction on 2. intros. case H2.
	case H1. search.
	case H1.
		apply append_prune to H3. apply IH to _ H3. search.
		apply append_prune to H3.
		apply append_prune to H3. apply IH to _ H3. search.
		apply append_prune to H3.
		apply append_prune_tm to H3. apply IH to _ H3. search.
		apply IH to _ H3. search.

Theorem wfj_rev : forall X E, wfj (X :: E) -> wfj E.
intros. case H1. search. search. search. search.

Theorem wfj_member_prune : forall (E : olist) B, nabla (x : ty),
	member (B x) E -> exists Fr, B = x\Fr.
induction on 1. intros. case H1.
	search. apply IH to H2. search.

Theorem wfj_tyvar_exvar : forall E X,
	wfj E -> member (tyvar X) E -> member (exvar X) E -> false.
induction on 1. intros. case H1.
	case H2.
	case H2. case H3. apply wfj_member_prune to H5.
		case H3. apply IH to H4 H5 H6.
	case H2. case H3. apply wfj_member_prune to H5.
		apply IH to H4 H5 H6.
	case H2. case H3. apply IH to H4 H6 H7.
	case H2. case H3. apply IH to H4 H6 H7.

Theorem wfj_nabla_prune_tyvar : forall F E FxE, nabla x,
	append (F x) (tyvar x :: E x) (FxE x) -> wfj (FxE x) ->
		exists Er, E = x\Er.
induction on 1. intros. case H1.
	case H2. search.
	case H2.
		apply IH to H3 _. search. apply append_prune to H3.
		apply IH to H3 _. search. apply append_prune to H3.
		apply IH to H3 _. search. apply IH to H3 _. search.

Theorem wfj_nabla_prune_exvar : forall F E FxE, nabla x,
	append (F x) (exvar x :: E x) (FxE x) -> wfj (FxE x) ->
		exists Er, E = x\Er.
induction on 1. intros. case H1.
	case H2. search.
	case H2.
		apply IH to H3 _. search. apply append_prune to H3.
		apply IH to H3 _. search. apply append_prune to H3.
		apply IH to H3 _. search. apply IH to H3 _. search.

Theorem wfj_nabla_prune_exvars : forall G F E GxFyE, nabla x y,
	split3 (G x y) (exvar x :: F x y) (exvar y :: E x y) (GxFyE x y) -> wfj (GxFyE x y) ->
	exists Fr Er, F = x\ Fr /\ E = x\ y\ Er.
intros. case H1 (keep).
	apply wfj_nabla_prune_exvar to H4 H2. apply append_prune to H3.
	apply split3_alt_inv to H1. case H5. apply wfj_nabla_prune_exvar to H6 _.
		apply append_prune to H7. search.

Theorem wfj_nabla_prune_exvar_tyvar : forall G F E GxFyE, nabla x y,
	split3 (G x y) (exvar x :: F x y) (tyvar y :: E x y) (GxFyE x y) -> wfj (GxFyE x y) ->
	exists Fr Er, F = x\ Fr /\ E = x\ y\ Er.
intros. case H1 (keep).
	apply wfj_nabla_prune_tyvar to H4 H2. apply append_prune to H3.
	apply split3_alt_inv to H1. case H5. apply wfj_nabla_prune_exvar to H6 _.
		apply append_prune to H7. search.

Theorem wfj_nabla_prune_tyvar_exvar : forall G F E GxFyE, nabla x y,
	split3 (G x y) (tyvar x :: F x y) (exvar y :: E x y) (GxFyE x y) -> wfj (GxFyE x y) ->
	exists Fr Er, F = x\ Fr /\ E = x\ y\ Er.
intros. case H1 (keep).
	apply wfj_nabla_prune_exvar to H4 H2. apply append_prune to H3.
	apply split3_alt_inv to H1. case H5. apply wfj_nabla_prune_tyvar to H6 _.
		apply append_prune to H7. search.

Theorem wfj_nabla_prune : forall F E FxE, nabla x,
	append (F x) (tyvar x :: E x) (FxE x) \/ append (F x) (exvar x :: E x) (FxE x) ->
		wfj (FxE x) -> exists Er, E = x\Er.
intros. case H1. backchain wfj_nabla_prune_tyvar with x = n1.
	backchain wfj_nabla_prune_exvar with x = n1.
%endregion

Theorem wfj_env_wft : forall E A, env E -> wfta E A -> wft E A.
induction on 2. intros. case H2.
	search. search.
	apply env_no_ex to _ _.
	unfold. backchain IH. backchain IH.
	apply IH to _ H3. search.

Theorem mem_tyvar_subst : forall E A, nabla x (y:ty),
	member (tyvar x) (E x y) -> member (tyvar x) (E x (A x)).
induction on 1. intros. case H1. search.
	apply IH to H2 with E = x\ y\ L y x, A = A. search.
Theorem mem_exvar_subst : forall E A, nabla x (y:ty),
	member (exvar x) (E x y) -> member (exvar x) (E x (A x)).
induction on 1. intros. case H1. search.
	apply IH to H2 with E = x\ y\ L y x, A = A. search.

Theorem append_subst : forall F E FE A, nabla (x:ty),
	append (F x) (E x) (FE x) -> append (F A) (E A) (FE A).
induction on 1. intros. case H1. search.
	apply IH to H2 with A = A. search.
Theorem append_subst_x : forall F E FE A, nabla (x:ty),
	append (F x) (E x) (FE x) -> append (F (A x)) (E (A x)) (FE (A x)).
induction on 1. intros. case H1. search.
	apply IH to H2 with A = A. search.

% Algorithmic Well-formedness

Theorem wfta_prune : forall E A, nabla (x:ty),
	wfta E (A x) -> (exists Ar, A = x\Ar).
induction on 1. intros. case H1. search.
	search. apply member_prune to H2.
	search. apply member_prune to H2.
	apply IH to H2. apply IH to H3. search.
	apply IH to H2. search.

Theorem wfta_prune_tm : forall E A, nabla (x:tm),
	wfta (E x) (A x) -> (exists Ar, A = x\Ar).
induction on 1. intros. case H1. search.
	search. search.
	apply IH to H2. apply IH to H3. search.
	apply IH to H2. search.

Theorem wft_prune_tm : forall E A, nabla (x:tm),
	wft (E x) (A x) -> (exists Ar, A = x\Ar).
induction on 1. intros. case H1. search. search.
	apply IH to H2. apply IH to H3. search.
	apply IH to H2. search.

Theorem wfta_weaken : forall E F G T EG EFG,
	append E G EG -> split3 E F G EFG ->
	wfta EG T -> wfta EFG T.
induction on 3. intros. case H3.
	search.
	unfold. intros.
		assert (member (tyvar n1) (EFG n1)). backchain split3_mem.
		apply append_mem_inv to _ H4. case H5. search. search. search.
	unfold 3. intros.
		assert (member (exvar n1) (EFG n1)). backchain split3_mem.
		apply append_mem_inv to _ H4. case H5. search. search. search.
	unfold. apply IH to _ _ H4. search. apply IH to _ _ H5. search.
	unfold. intros.
		backchain IH with E = (tyvar n1 :: E), F = F, EFG = (tyvar n1 :: EFG).
		backchain split3_cons.

Theorem wfta_weaken_f : forall E F EF T,
	append E F EF -> wfta F T -> wfta EF T.
intros. backchain wfta_weaken with E = nil, F = E, G = F.
Theorem wfta_weaken_ex : forall E T, nabla x,
	wfta E T -> wfta (exvar x :: E) T.
intros. backchain wfta_weaken_f with E = exvar n1 :: nil.
Theorem wfta_weaken_ty : forall E T, nabla x,
	wfta E T -> wfta (tyvar x :: E) T.
intros. backchain wfta_weaken_f with E = tyvar n1 :: nil.
Theorem wfta_weaken_of : forall E T A, nabla x,
	wfta E T -> wfta (of x A :: E) T.
intros. backchain wfta_weaken_f with E = of n1 A :: nil.
Theorem wfta_weaken_j : forall E T J,
	wfta E T -> wfta (j J :: E) T.
intros. backchain wfta_weaken_f with E = j J :: nil.

Theorem wfta_open_equiv_var : forall F E FbE FxE A, nabla x,
	append (F x) (tyvar x :: E) (FbE x) -> append (F x) (exvar x :: E) (FxE x) ->
	wfj (FbE x) -> wfta (FbE x) (A x) -> wfta (FxE x) (A x).
induction on 4. intros. case H4. search.
	apply append_mem_inv to H1 H5. case H6.
		apply append_mem to H2 _. search.
		case H7. apply append_mem to H2 _ with X = tyvar n2. search.
	apply append_mem to H2 _. search.
	apply append_mem_inv to H1 H5. case H6.
		apply append_mem to H2 _. search.
		case H7. apply append_mem to H2 _ with X = exvar n2. search.
	apply append_mem to H2 _. search.
	apply IH to _ _ _ H5. apply IH to _ _ _ H6. search.
	apply IH to _ _ _ H5 with F = x\ tyvar n2 :: F x. search.

Theorem wfta_open_exvar : forall E A, nabla x,
	wfj E -> wfta E (all A) -> wfta (exvar x :: E) (A x).
intros. case H2. apply wfta_open_equiv_var to _ _ _ H3. search.

Theorem wfta_subst : forall E T X m,
	wfta E (T X) -> wfta E m -> wfta E (T m).
induction on 1. intros. case H1.
	case H3. search. search.
	case H3. search. search.
	case H3. search. search.
	case H3. apply IH to H4 H2 with T = T1. apply IH to H5 H2 with T = T2.
		search. search.
	case H3. unfold. assert exists T, T1 = x\y\ T y x. case H5.
		apply IH to H4 _ with X = X, m = m, T = T2 n1.
		backchain wfta_weaken_f with E = tyvar n1 :: nil.
		search. search.

Theorem wfta_strenthen_tyvar : forall F E FE FxE A T, nabla x,
	append (F x) E (FE x) -> append (F x) (tyvar x :: E) (FxE x) ->
	wfta (FxE x) T -> wfta E A -> wfta (FE A) T.
induction on 3. intros. case H3.
	search.
	assert member (tyvar n2) (FE n2 n1).
			apply append_mem_inv to H2 H5. case H6. backchain append_mem.
			case H7. backchain append_mem.
		apply mem_tyvar_subst to H6 with A = A. search.
	assert member (exvar n2) (FE n2 n1).
			apply append_mem_inv to H2 H5. case H6. backchain append_mem.
			case H7. backchain append_mem.
		apply mem_exvar_subst to H6 with A = A. search.
	apply IH to H1 H2 H5 _. apply IH to H1 H2 H6 _. search.
	assert append (tyvar n2 :: F n1) (tyvar n1 :: E) (tyvar n2 :: FxE n1).
		apply IH to _ H6 H5 _ with FE = x\ tyvar n2 :: FE x. search.

Theorem wfta_strenthen_exvar : forall F E FE FxE A T, nabla x,
	append (F x) E (FE x) -> append (F x) (exvar x :: E) (FxE x) ->
	wfta (FxE x) T -> wfta E A -> wfta (FE A) T.
induction on 3. intros. case H3.
	search.
	assert member (tyvar n2) (FE n2 n1).
			apply append_mem_inv to H2 H5. case H6. backchain append_mem.
			case H7. backchain append_mem.
		apply mem_tyvar_subst to H6 with A = A. search.
	assert member (exvar n2) (FE n2 n1).
			apply append_mem_inv to H2 H5. case H6. backchain append_mem.
			case H7. backchain append_mem.
		apply mem_exvar_subst to H6 with A = A. search.
	apply IH to H1 H2 H5 _. apply IH to H1 H2 H6 _. search.
	assert append (tyvar n2 :: F n1) (exvar n1 :: E) (tyvar n2 :: FxE n1).
		apply IH to _ H6 H5 _ with FE = x\ tyvar n2 :: FE x. search.

Theorem wfta_anyof : forall F E FAE FBE A B T, nabla x,
	append (F x) (of x A :: E) (FAE x) -> append (F x) (of x B :: E) (FBE x) ->
	wfta (FAE x) (T x) -> wfta (FBE x) (T x).
induction on 3. intros. case H3. search.
	apply append_mem_inv to H1 _. case H5.
		apply append_mem to H2 _. search.
		case H6. apply append_mem to H2 _ with X = tyvar n2. search.
	apply append_mem_inv to H1 _. case H5.
		apply append_mem to H2 _. search.
		case H6. apply append_mem to H2 _ with X = exvar n2. search.
	apply IH to _ _ H4 with B = B. apply IH to _ _ H5 with B = B. search.
	apply IH to _ _ H4 with F = x\ tyvar n2 :: F x, B = B. search.

Theorem wft_anyof : forall F E FAE FBE A B T, nabla x,
	append (F x) (of x A :: E) (FAE x) -> append (F x) (of x B :: E) (FBE x) ->
	wft (FAE x) (T x) -> wft (FBE x) (T x).
induction on 3. intros. case H3. search.
	apply append_mem_inv to H1 _. case H5.
		apply append_mem to H2 _. search.
		case H6. apply append_mem to H2 _ with X = tyvar n2. search.
	apply IH to _ _ H4 with B = B. apply IH to _ _ H5 with B = B. search.
	apply IH to _ _ H4 with F = x\ tyvar n2 :: F x, B = B. search.

Theorem wftm_anyof : forall F E FAE FBE A B X, nabla x,
	append (F x) (of x A :: E) (FAE x) -> append (F x) (of x B :: E) (FBE x) ->
	wftm (FAE x) (X x) -> wftm (FBE x) (X x).
induction on 3. intros. case H3. search.
	apply append_mem_inv to H1 _. case H5.
		apply append_mem to H2 _. search.
		case H6. apply append_mem to H2 _ with X = of n2 (A1 n1). search.
	apply append_mem to H2 _. search.
	apply IH to _ _ H5 with F = x\ of n2 (A1 x) :: F x, B = B.
		apply wfta_anyof to _ _ H4 with B = B. search.
	apply IH to _ _ H4 with B = B. apply IH to _ _ H5 with B = B. search.
	apply IH to _ _ H4 with B = B. apply wfta_anyof to H1 H2 H5. search.

Theorem wftm_anyA : forall E A X, nabla x,
	wftm E (lam X) -> wftm (of x A :: E) (X x).
intros. case H1. apply wftm_anyof to _ _ H3 with B = A. search.

%Theorem wfj_strenthen_mid : forall F E FxE FE, nabla x,
%	append F (tyvar x :: E) (FxE x) \/ append F (exvar x :: E) (FxE x) ->
%	append F E FE -> wfj FE -> wfj (FxE x).

% A general form would be: (FE A) |- (T B) given (FE A) |- B
Theorem wfta_strenthen_exvar_notfresh : forall F E FE FxE A T, nabla x,
	append (F x) E (FE x) -> append (F x) (exvar x :: E) (FxE x) ->
	wfta (FxE x) (T x) -> wfta E A -> wfta (FE A) (T A).
intros. apply wfta_subst to H3 _ with T = T, m = A.
	apply append_assoc_inv to _ H2 with B = exvar n1 :: nil.
	backchain wfta_weaken_f with E = AB n1.
	apply wfta_strenthen_exvar to H1 H2 _ _. search.
Theorem wfta_strenthen_tyvar_notfresh : forall F E FE FxE A T, nabla x,
	append (F x) E (FE x) -> append (F x) (tyvar x :: E) (FxE x) ->
	wfta (FxE x) (T x) -> wfta E A -> wfta (FE A) (T A).
intros. apply wfta_subst to H3 _ with T = T, m = A.
	apply append_assoc_inv to _ H2 with B = tyvar n1 :: nil.
	backchain wfta_weaken_f with E = AB n1.
	apply wfta_strenthen_tyvar to H1 H2 _ _. search.
Theorem wfta_top_tyvar_notfresh : forall E T A, nabla x,
	wfj E -> wfta (tyvar x :: E) (T x) -> wfta E A -> wfta E (T A).
intros. apply wfta_strenthen_tyvar_notfresh to _ _ _ _. search.

Theorem wfta_strenthen_f : forall E T, nabla x,
	wfta (tyvar x :: E) T \/ wfta (exvar x :: E) T -> wfta E T.
intros. case H1.
	apply wfta_strenthen_tyvar to _ _ H2 _ with F = x\ nil, x = n1. search.
	apply wfta_strenthen_exvar to _ _ H2 _ with F = x\ nil, x = n1. search.


Theorem mono_wft : forall E m, mono E m -> wft E m.
induction on 1. intros. case H1. search.
	search. unfold. backchain IH. backchain IH.
Theorem mono_wfta : forall E m, mono E m -> wfta E m.
induction on 1. intros. case H1. search.
	search. unfold. backchain IH. backchain IH.

Theorem wfta_strenthen_exvar_mono : forall F E FE FxE A T, nabla x,
	append (F x) E (FE x) -> append (F x) (exvar x :: E) (FxE x) ->
	wfta (FxE x) (T x) -> mono E A -> wfta (FE A) (T A).
intros. apply mono_wfta to H4.
	apply wfta_strenthen_exvar_notfresh to H1 H2 H3 H5. search.


Theorem wftm_prune : forall E X, nabla (x : ty),
	wftm E (X x) -> exists Xr, X = x\ Xr.
induction on 1. intros. case H1. search. search.
	apply wfta_prune to H2. apply IH to H3. search.
	apply IH to H2. apply IH to H3. search.
	apply IH to H2. apply wfta_prune to H3. search.

Theorem wft_prune_exvar : forall E m, nabla x,
	wfj (E x) -> member (exvar x) (E x) -> wft (E x) (m x) -> exists M, m = x\ M.
induction on 3. intros. case H3. search. search.
	apply wfj_tyvar_exvar to H1 _ _.
	apply IH to _ _ H4. apply IH to _ _ H5. search.
	apply IH to _ _ H4. search.

/*
Theorem wftm_prune_exvar : forall E X, nabla (x : ty),
	wftm (E x) (X x) -> wfj (E x) -> member (exvar x) (E x) -> exists Xr, X = x\ Xr.
induction on 1. intros. case H1 (keep). search. search.
	apply IH to H5 _ _. search.
	apply IH to H4 _ _. apply IH to H5 _ _. search.
	apply wft_prune_exvar to _ _ H5. apply IH to H4 _ _ with x = n1. search.
	apply wft_prune_exvar to _ _ H5. apply IH to H4 _ _ with x = n1. search.*/

/*
Theorem wftm_subst : forall E X x m,
	wfj E -> wftm E (X x) -> wfta E m -> wftm E (X m).
induction on 2. intros. case H2.
	case H4. search.
	case H4. search.
	case H4. apply wfta_weaken_f to _ H3 _ with EF = of n1 A :: E.
		apply IH to _ H6 H7 with X = x\ X2 x n1. search.
	case H4. unfold. backchain IH with X = X2. backchain IH with X = X3.
	case H4. unfold. backchain IH with X = X2. backchain wft_subst with T = X3.*/

Theorem wftm_weaken : forall E F G T EG EFG,
	append E G EG -> split3 E F G EFG ->
	wftm EG T -> wftm EFG T.
induction on 3. intros. case H3.
	search.
	unfold. intros.
		assert (member (of n1 A) (EFG n1)). backchain split3_mem.
		apply append_mem_inv to _ H4. case H5. search. search. search.
	case H2. assert split3 (of n1 A :: E) F G (of n1 A :: EFG).
		apply wfta_weaken to _ _ H4. apply IH to _ H8 H5. search.
	unfold. apply IH to _ _ H4. search. apply IH to _ _ H5. search.
	apply split3_cons to H2 with X = tyvar n1.
	apply IH to _ _ H4. apply wfta_weaken to _ _ H5. search.

Theorem wftm_weaken_f : forall E F EF T,
	append E F EF -> wftm F T -> wftm EF T.
intros. backchain wftm_weaken with E = nil, F = E, G = F.
Theorem wftm_weaken_ex : forall E T, nabla x,
	wftm E T -> wftm (exvar x :: E) T.
intros. backchain wftm_weaken_f with E = exvar n1 :: nil.
Theorem wftm_weaken_ty : forall E T, nabla x,
	wftm E T -> wftm (tyvar x :: E) T.
intros. backchain wftm_weaken_f with E = tyvar n1 :: nil.
Theorem wftm_weaken_of : forall E T A, nabla x,
	wftm E T -> wftm (of x A :: E) T.
intros. backchain wftm_weaken_f with E = of n1 A :: nil.
Theorem wftm_weaken_j : forall E T J,
	wftm E T -> wftm (j J :: E) T.
intros. backchain wftm_weaken_f with E = j J :: nil.

Theorem mem_of_subst : forall E T A, nabla x (y:ty),
	member (of x (T x y)) (E x y) -> member (of x (T x (A x))) (E x (A x)).
induction on 1. intros. case H1. search.
	apply IH to H2 with E = x\ y\ L y x, A = A. search.

Theorem member_of_subst : forall E T A, nabla x (y:ty),
	member (of x (T y)) (E x y) -> member (of x (T (A x y))) (E x (A x y)).
induction on 1. intros. case H1. search.
	apply IH to H2 with E = x\ y\ L y x, A = A. search.

Theorem wft_strenthen_exvar : forall F E FE FxE A T, nabla x,
	append (F x) E (FE x) -> append (F x) (exvar x :: E) (FxE x) ->
	wft (FxE x) T -> wft E A -> wft (FE A) T.
induction on 3. intros. case H3.
	search.
	assert member (tyvar n2) (FE n2 n1).
			apply append_mem_inv to H2 H5. case H6. backchain append_mem.
			case H7. backchain append_mem.
		apply mem_tyvar_subst to H6 with A = A. search.
	apply IH to H1 H2 H5 _. apply IH to H1 H2 H6 _. search.
	assert append (tyvar n2 :: F n1) (exvar n1 :: E) (tyvar n2 :: FxE n1).
		apply IH to _ H6 H5 _ with FE = x\ tyvar n2 :: FE x. search.

Theorem wft_strenthen_exvar_a : forall F E FE FxE A T, nabla x,
	append (F x) E (FE x) -> append (F x) (exvar x :: E) (FxE x) ->
	wft (FxE x) T -> wfta E A -> wft (FE A) T.
induction on 3. intros. case H3.
	search.
	assert member (tyvar n2) (FE n2 n1).
			apply append_mem_inv to H2 H5. case H6. backchain append_mem.
			case H7. backchain append_mem.
		apply mem_tyvar_subst to H6 with A = A. search.
	apply IH to H1 H2 H5 _. apply IH to H1 H2 H6 _. search.
	assert append (tyvar n2 :: F n1) (exvar n1 :: E) (tyvar n2 :: FxE n1).
		apply IH to _ H6 H5 _ with FE = x\ tyvar n2 :: FE x. search.

Theorem wft_wfta : forall E A, wft E A -> wfta E A.
induction on 1. intros. case H1. search. search.
	apply IH to H2. apply IH to H3. search.
	apply IH to H2. search.

Theorem wft_strenthen_tyvar_fresh : forall F E FE FxE A T, nabla x,
	append (F x) E (FE x) -> append (F x) (tyvar x :: E) (FxE x) ->
	wft (FxE x) T -> wft E A -> wft (FE A) T.
induction on 3. intros. case H3.
	search.
	assert member (tyvar n2) (FE n2 n1).
			apply append_mem_inv to H2 H5. case H6. backchain append_mem.
			case H7. backchain append_mem.
		apply mem_tyvar_subst to H6 with A = A. search.
	apply IH to H1 H2 H5 _. apply IH to H1 H2 H6 _. search.
	assert append (tyvar n2 :: F n1) (tyvar n1 :: E) (tyvar n2 :: FxE n1).
		apply IH to _ H6 H5 _ with FE = x\ tyvar n2 :: FE x. search.

Theorem wftm_strenthen_tyvar_notfresh : forall F E FE FxE A X, nabla x,
	append (F x) E (FE x) -> append (F x) (tyvar x :: E) (FxE x) ->
	wftm (FxE x) (X x) -> wfta E A -> wftm (FE A) (X A).
induction on 3. intros. case H3.
	search.
	assert member (of n2 (A1 n1)) (FE n2 n1).
			apply append_mem_inv to H2 H5. case H6. backchain append_mem.
			case H7. backchain append_mem.
		apply mem_of_subst to H6 with A = A. apply wfta_prune_tm to H4. search.
	apply IH to _ _ H6 _.
		apply wfta_strenthen_tyvar_notfresh to _ _ H5 H4. search.
	apply IH to H1 H2 H5 _. apply IH to H1 H2 H6 _. search.
	apply IH to _ _ H5 _.
		apply wfta_strenthen_tyvar_notfresh to _ _ H6 _. search.

Theorem wftm_strenthen_tyvar : forall F E FE FxE A T, nabla x,
	append (F x) E (FE x) -> append (F x) (tyvar x :: E) (FxE x) ->
	wftm (FxE x) T -> wfta E A -> wftm (FE A) T.
intros. apply wftm_strenthen_tyvar_notfresh to H1 H2 H3 H4. search.

Theorem wftm_strenthen_exvar_notfresh : forall F E FE FxE A X, nabla x,
	append (F x) E (FE x) -> append (F x) (exvar x :: E) (FxE x) ->
	wftm (FxE x) (X x) -> wfta E A -> wftm (FE A) (X A).
induction on 3. intros. case H3.
	search.
	assert member (of n2 (A1 n1)) (FE n2 n1).
			apply append_mem_inv to H2 H5. case H6. backchain append_mem.
			case H7. backchain append_mem.
		apply mem_of_subst to H6 with A = A. apply wfta_prune_tm to H4. search.
	apply IH to _ _ H6 _.
		apply wfta_strenthen_exvar_notfresh to _ _ H5 H4. search.
	apply IH to H1 H2 H5 _. apply IH to H1 H2 H6 _. search.
	apply IH to _ _ H5 _.
		apply wfta_strenthen_exvar_notfresh to _ _ H6 _. search.

Theorem wftm_strenthen_exvar : forall F E FE FxE A T, nabla x,
	append (F x) E (FE x) -> append (F x) (exvar x :: E) (FxE x) ->
	wftm (FxE x) T -> wfta E A -> wftm (FE A) T.
intros. apply wftm_strenthen_exvar_notfresh to H1 H2 H3 H4. search.

/*
Theorem wftm_strenthen_exvar_notfresh : forall F E FE FxE A X, nabla x,
	append (F x) E (FE x) -> append (F x) (exvar x :: E) (FxE x) ->
	wfj (FxE x) -> wftm (FxE x) (X x) -> wfta E A -> exists Xr, X = x\ Xr /\ wftm (FE A) Xr.
intros. apply wftm_prune_exvar to H4 _ _. backchain append_mem.
	apply append_assoc_inv to _ H2 with B = exvar n1 :: nil.
	apply wftm_strenthen_exvar to H1 H2 _ _ _. search.
*/

Theorem wft_strenthen_tyvar_notfresh : forall F E FE FxE A T, nabla x,
	append (F x) E (FE x) -> append (F x) (tyvar x :: E) (FxE x) ->
	wft (FxE x) (T x) -> wft E A -> wft (FE A) (T A).
induction on 3. intros. case H3.
	search.
	assert member (tyvar n2) (FE n2 n1).
			apply append_mem_inv to H2 H5. case H6. backchain append_mem.
			case H7. backchain append_mem.
		apply mem_tyvar_subst to H6 with A = A. search.
	W: apply wft_wfta to H4.
		A: apply append_subst to H1 with A = A.
		W: apply wft_weaken_f to A _. search.
	apply IH to H1 H2 H5 _. apply IH to H1 H2 H6 _. search.
	apply IH to _ _ H5 _. search.

Theorem wfjg_strenthen_exvar_notfresh : forall F E FE FxE A J, nabla x,
	append (F x) E (FE x) -> append (F x) (exvar x :: E) (FxE x) ->
	wfjg (FxE x) (J x) -> wfta E A -> wfjg (FE A) (J A).
induction on 3. intros. case H3.
	apply wfta_strenthen_exvar_notfresh to H1 H2 H5 H4.
		apply wfta_strenthen_exvar_notfresh to H1 H2 H6 H4. search.
	apply wfta_strenthen_exvar_notfresh to H1 H2 H6 H4.
		apply wftm_strenthen_exvar_notfresh to H1 H2 H5 H4. search.
	apply wftm_strenthen_exvar_notfresh to H1 H2 H5 H4.
		apply IH to _ _ H6 _ with F = x\ tyvar n2 :: F x.
		search.
	apply wftm_strenthen_exvar_notfresh to H1 H2 H5 H4.
		apply wfta_strenthen_exvar_notfresh to H1 H2 H6 H4.
		apply IH to _ _ H7 _ with F = x\ tyvar n2 :: F x.
		search.

Theorem wfjg_strenthen_tyvar_notfresh : forall F E FE FxE A J, nabla x,
	append (F x) E (FE x) -> append (F x) (tyvar x :: E) (FxE x) ->
	wfjg (FxE x) (J x) -> wfta E A -> wfjg (FE A) (J A).
induction on 3. intros. case H3.
	apply wfta_strenthen_tyvar_notfresh to H1 H2 H5 H4.
		apply wfta_strenthen_tyvar_notfresh to H1 H2 H6 H4. search.
	apply wfta_strenthen_tyvar_notfresh to H1 H2 H6 H4.
		apply wftm_strenthen_tyvar_notfresh to H1 H2 H5 H4. search.
	apply wftm_strenthen_tyvar_notfresh to H1 H2 H5 H4.
		apply IH to _ _ H6 _ with F = x\ tyvar n2 :: F x.
		search.
	apply wftm_strenthen_tyvar_notfresh to H1 H2 H5 H4.
		apply wfta_strenthen_tyvar_notfresh to H1 H2 H6 H4.
		apply IH to _ _ H7 _ with F = x\ tyvar n2 :: F x.
		search.

Theorem wfj_remove_exvar : forall F E FxE FEA A, nabla x,
	append (F x) (exvar x :: E) (FxE x) -> wfj (FxE x) ->
	wfta E A -> append (F A) E FEA -> wfj FEA.
induction on 2. intros. W: case H2 (keep).
	case H1.
	case H1. case H4. apply append_prune to H5. apply wfta_prune to H3.
		apply append_prune_AB to H6. apply IH to H5 W _ _. search.
	case H1. case H4. apply append_prune to H5.
	case H1. case H4. apply append_prune to H5. apply wfta_prune to H3.
		apply append_prune_AB to H6. apply IH to H5 W _ _. search.
	case H1. case H4. search. apply append_prune to H5.
	case H1. case H4. apply append_prune_tm to H5. apply wfta_prune_tm to H3.
		apply append_prune_AB_tm to H6. apply IH to H5 W _ _.
		A: apply append_total_E to H5 with B = FB1.
		A: apply append_subst to A with A = Ar. apply append_det to H6 *A1.
		apply wfta_strenthen_exvar_notfresh to A H5 W1 H3. search.
	case H1. case H4.
		A: apply append_total_E to H5 with B = E.
		A: apply append_subst to A with A = A. apply append_det to H6 *A1.
		apply IH to H5 W _ _. apply wfjg_strenthen_exvar_notfresh to A H5 _ _. search.

Theorem wfj_remove_tyvar : forall F E FxE FEA A, nabla x,
	append (F x) (tyvar x :: E) (FxE x) -> wfj (FxE x) ->
	wfta E A -> append (F A) E FEA -> wfj FEA.
induction on 2. intros. W: case H2 (keep).
	case H1.
	case H1. case H4. apply append_prune to H5. apply wfta_prune to H3.
		apply append_prune_AB to H6. apply IH to H5 W _ _. search.
	case H1. case H4. search. apply append_prune to H5.
	case H1. case H4. apply append_prune to H5. apply wfta_prune to H3.
		apply append_prune_AB to H6. apply IH to H5 W _ _. search.
	case H1. case H4. apply append_prune to H5.
	case H1. case H4. apply append_prune_tm to H5. apply wfta_prune_tm to H3.
		apply append_prune_AB_tm to H6. apply IH to H5 W _ _.
		A: apply append_total_E to H5 with B = FB1.
		A: apply append_subst to A with A = Ar. apply append_det to H6 *A1.
		apply wfta_strenthen_tyvar_notfresh to A H5 W1 H3. search.
	case H1. case H4.
		A: apply append_total_E to H5 with B = E.
		A: apply append_subst to A with A = A. apply append_det to H6 *A1.
		apply IH to H5 W _ _. apply wfjg_strenthen_tyvar_notfresh to A H5 _ _. search.

Theorem wfj_remove_exvar_nabla : forall F E FxE FE A, nabla x,
	append (F x) (exvar x :: E) (FxE x) -> append (F x) E (FE x) -> wfj (FxE x) ->
	wfta E A -> wfj (FE A).
intros. apply append_subst to H2 with A = A.
	apply wfj_remove_exvar to H1 H3 _ H5. search.

Theorem wfj_remove_exvar_mono : forall F E FxE FE A, nabla x,
	append (F x) (exvar x :: E) (FxE x) -> append (F x) E (FE x) -> wfj (FxE x) ->
	mono E A -> wfj (FE A).
intros. apply mono_wfta to H4. apply wfj_remove_exvar_nabla to H1 H2 H3 H5. search.

Theorem wfj_remove_tyvar_nabla : forall F E FxE FE A, nabla x,
	append (F x) (tyvar x :: E) (FxE x) -> append (F x) E (FE x) -> wfj (FxE x) ->
	wfta E A -> wfj (FE A).
intros. apply append_subst to H2 with A = A.
	apply wfj_remove_tyvar to H1 H3 _ H5. search.

% Theorem wfj_remove_tyvar_mono : forall F E FxE FE A, nabla x,
% 	append (F x) (tyvar x :: E) (FxE x) -> append (F x) E (FE x) -> wfj (FxE x) ->
% 	mono E A -> wfj (FE A).
% intros. apply mono_wfta to H4. apply wfj_remove_tyvar_nabla to H1 H2 H3 H5. search.

Theorem mono_strenthen_exvar : forall F E FE FxE A T, nabla x,
	append (F x) E (FE x) -> append (F x) (exvar x :: E) (FxE x) ->
	mono (FxE x) T -> wfta E A -> mono (FE A) T.
induction on 3. intros. case H3.
	search.
	assert member (tyvar n2) (FE n2 n1).
			apply append_mem_inv to H2 H5. case H6. backchain append_mem.
			case H7. backchain append_mem.
		apply mem_tyvar_subst to H6 with A = A. search.
	apply IH to H1 H2 H5 _. apply IH to H1 H2 H6 _. search.

Theorem member_tyvar_nabla_subst : forall E A, nabla x (y:ty),
	member (tyvar x) (E x y) -> member (tyvar x) (E x (A x y)).
induction on 1. intros. case H1. search.
	apply IH to H2 with A = A. unfold. search.

Theorem member_exvar_nabla_subst : forall E A, nabla x (y:ty),
	member (exvar x) (E x y) -> member (exvar x) (E x (A x y)).
induction on 1. intros. case H1. search.
	apply IH to H2 with A = A. unfold. search.

Theorem wfj_tyvar_mid_exvar : forall F E FxE FE A, nabla x y,
	append (F x y) (exvar x :: E y) (FxE x y) -> append (F (A y) y) (E y) (FE y) ->
	wfj (FxE x y) -> member (tyvar y) (FE y) -> member (tyvar y) (FxE x y).
induction on 1. intros. case H1. case H2. search.
	case H2. case H3.
		apply append_prune to H5. case H4. apply IH to H5 _ _ _. search.
		apply append_prune to H5. search.
		apply append_prune to H5. case H4. apply IH to H5 _ _ _. search.
		apply append_prune to H5.
		apply append_prune to H5. case H4. apply IH to H5 _ _ _. search.
		case H4. apply IH to H5 _ _ _. search.
		case H4. apply IH to H5 _ _ _. search.

Theorem mono_weaken_exvar : forall F E FE FxE A T, nabla x,
	append (F x) E (FE x) -> append (F x) (exvar x :: E) (FxE x) -> wfj (FxE x) ->
	mono (FE A) T -> wfta E A -> mono (FxE x) T.
induction on 4. intros. case H4.
	search.
	assert member (tyvar n2) (FxE n2 n1).
		apply append_subst to H1 with x = n1, A = A n2.
		apply wfj_tyvar_mid_exvar to H2 H7 _ _. search. search.
	apply IH to H1 H2 _ H6 _. apply IH to H1 H2 _ H7 _. search.

Theorem mono_prune_exvar : forall E m, nabla x,
	wfj (E x) -> member (exvar x) (E x) -> mono (E x) (m x) -> exists M, m = x\ M.
induction on 3. intros. case H3. search. search.
	apply wfj_tyvar_exvar to H1 _ _.
	apply IH to _ _ H4. apply IH to _ _ H5. search.
